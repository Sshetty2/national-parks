{"version":3,"sources":["Buttons.js","Park.js","ParkMap.js","UsState.js","FilterControls.js","LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveNewParksArray","newArray","state","storageKey","visitedParks","bucketListParks","localStorage","hasOwnProperty","includes","parkUrl","index","findIndex","parkCode","splice","push","saveToLocalStorage","updateParkCodes","newArrayToStore","JSON","stringify","setItem","buttonType","toolTipText","react_default","a","createElement","className","onClick","iconType","id","data-tip","data-for","dist_default","type","effect","Component","Park","toggleFullCard","setState","displayFull","removeCard","event","preventDefault","imagePath","concat","selectedPark","image","parkName","dateEstablished","annualVisitors","toLocaleString","editorsChoice","href","websiteUrl","target","description","src_Buttons","urlCode","alt","src","ParkMap","getPark","parks","find","park","options","zoom","uniqueStateZoom","Alaska","California","Michigan","position","_this2","stateZoom","stateName","greenIcon","L","icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","violetIcon","blueIcon","Map","minZoom","maxZoom","center","stateCoord","length","TileLayer","url","attribution","subdomains","ext","map","lat","latitude","replace","lon","longitude","Marker","key","Tooltip","src_Park","UsState","name","selectedState","capitalCity","Population","nationalParks","stateFlower","FilterControls","getState","value","usStates","setMapToState","stateObj","onChange","keys","usState","abbreviation","src_UsState","LandingPage","handleClick","openHomePage","App","showAllParks","currentUsStateName","currentUsStateCoord","currentParksToShow","showVisitedParks","filter","visitedParkCodes","showBucketList","bucketListParkCodes","pullFromLocalStorage","cachedBucketListKeys","getItem","parse","cachedVistedParkKeys","pageStatus","parksToShow","randomImageClass","Math","floor","random","fetch","then","data","json","results","nationalParks1810","forEach","catch","error","console","log","states1810","src_ParkMap","src_FilterControls","src_LandingPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAoEeA,cAhEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOPQ,kBAAoB,WAClB,IAAIC,EAOJ,GALEA,EAD4B,iBAA1BR,EAAKS,MAAMC,WACFV,EAAKD,MAAMY,aAEXX,EAAKD,MAAMa,gBAGnBC,aAAaC,eAAed,EAAKS,MAAMC,aAAiBF,EAASO,SAASf,EAAKS,MAAMO,SAAW,CACnG,IAAIC,EAAQT,EAASU,UAAU,SAAAC,GAAQ,OAAIA,IAAanB,EAAKS,MAAMO,UACnER,EAASY,OAAOH,EAAO,QAEvBT,EAASa,KAAKrB,EAAKS,MAAMO,SAE3BhB,EAAKsB,mBAAmBd,GACxBR,EAAKuB,gBAAgBvB,EAAKS,MAAMC,WAAYF,IAvB3BR,EA0BnBsB,mBAAqB,SAACd,GACpB,IAAIgB,EAAkBC,KAAKC,UAAUlB,GACrCK,aAAac,QAAQ3B,EAAKS,MAAMC,WAAYc,IA5B3BxB,EA+BnBuB,gBAAkB,SAACb,EAAYF,GAC7BR,EAAKD,MAAMwB,gBAAgBb,EAAYF,IA9BxCR,EAAKS,MAAQ,CACXO,QAAShB,EAAKD,MAAMiB,QACpBN,WAAYV,EAAKD,MAAMW,YAJPV,wEAoCjB,IAAI4B,EACAC,EASJ,OANEA,EAF4B,iBAA1B1B,KAAKM,MAAMC,YACbkB,EAAazB,KAAKJ,MAAMY,cACCI,SAASZ,KAAKM,MAAMO,SAAW,4BAA8B,wBAEtFY,EAAazB,KAAKJ,MAAMa,iBACCG,SAASZ,KAAKM,MAAMO,SAAW,gCAAkC,2BAI1Fc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QACEE,QAAS/B,KAAKI,kBACd0B,UAAW9B,KAAKJ,MAAMoC,SACtBC,GACER,EAAWb,SAASZ,KAAKM,MAAMO,SAAWb,KAAKM,MAAMC,WAAa,GAEpE2B,YAAA,EACAC,WAAU,WAAanC,KAAKM,MAAMC,aAGpCoB,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAcK,GAAI,WAAajC,KAAKM,MAAMC,WAAY8B,KAAK,OAAOC,OAAO,SAASZ,WA3DpEa,aCmGPC,cAlGd,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IAChB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAKR6C,eAAgB,WACd5C,EAAK6C,SAAS,CACZC,aAAc9C,EAAKS,MAAMqC,eARX9C,EAYlB+C,WAAa,SAACC,GACZA,EAAMC,iBACNjD,EAAKD,MAAMgD,aACX/C,EAAK6C,SAAS,CACZC,aAAa,KAhBC9C,EAoBlBuB,gBAAkB,SAACb,EAAYF,GAC7BR,EAAKD,MAAMwB,gBAAgBb,EAAYF,IAnBvCR,EAAKS,MAAQ,CACXqC,aAAa,GAHC9C,wEAyBhB,IAAIkD,EAAS,KAAAC,OAAQhD,KAAKJ,MAAMqD,aAAaC,OAC7C,OAAOlD,KAAKM,MAAMqC,aAChB,KAAK,EACH,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBC,QAAS/B,KAAK4C,aAC/CjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc9B,KAAKJ,MAAMqD,aAAaE,SAApD,kBACAxB,EAAAC,EAAAC,cAAA,oBAAY7B,KAAKJ,MAAMqD,aAAa3C,OACpCqB,EAAAC,EAAAC,cAAA,+BAAuB7B,KAAKJ,MAAMqD,aAAaG,iBAC/CzB,EAAAC,EAAAC,cAAA,8BAAsB7B,KAAKJ,MAAMqD,aAAaI,eAAeC,kBAC7D3B,EAAAC,EAAAC,cAAA,6BAAqB7B,KAAKJ,MAAMqD,aAAaM,eAC7C5B,EAAAC,EAAAC,cAAA,KAAG2B,KAAMxD,KAAKJ,MAAMqD,aAAaQ,WAAYC,OAAO,UAApD,WAAsE1D,KAAKJ,MAAMqD,aAAaE,SAA9F,iCACAxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgB9B,KAAKJ,MAAMqD,aAAaU,aACtDhC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS/B,KAAKyC,gBAA/C,aACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC+B,EAAD,CACE5B,SAAS,gBACTzB,WAAW,eACXM,QAASb,KAAKJ,MAAMqD,aAAaY,QACjCrD,aAAcR,KAAKJ,MAAMY,aACzBC,gBAAiBT,KAAKJ,MAAMa,gBAC5BW,gBAAiBpB,KAAKoB,kBAExBO,EAAAC,EAAAC,cAAC+B,EAAD,CACE5B,SAAS,wBACTzB,WAAW,aACXM,QAASb,KAAKJ,MAAMqD,aAAaY,QACjCrD,aAAcR,KAAKJ,MAAMY,aACzBC,gBAAiBT,KAAKJ,MAAMa,gBAC5BW,gBAAiBpB,KAAKoB,oBAI5BO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBgC,IAAI,OAAOC,IAAKhB,MAIxD,QACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBG,GAAG,cAAcF,QAAS/B,KAAK4C,aAClEjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc9B,KAAKJ,MAAMqD,aAAaE,SAApD,kBACAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBgC,IAAI,OAAOC,IAAKhB,IAChDpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBAAiD9B,KAAKJ,MAAMqD,aAAaM,eACzE5B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS/B,KAAKyC,gBAA/C,aACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC+B,EAAD,CACE5B,SAAS,gBACTzB,WAAW,eACXM,QAASb,KAAKJ,MAAMqD,aAAaY,QACjCrD,aAAcR,KAAKJ,MAAMY,aACzBC,gBAAiBT,KAAKJ,MAAMa,gBAC5BW,gBAAiBpB,KAAKoB,kBAExBO,EAAAC,EAAAC,cAAC+B,EAAD,CACE5B,SAAS,wBACTzB,WAAW,aACXM,QAASb,KAAKJ,MAAMqD,aAAaY,QACjCrD,aAAcR,KAAKJ,MAAMY,aACzBC,gBAAiBT,KAAKJ,MAAMa,gBAC5BW,gBAAiBpB,KAAKoB,6BAzFrBmB,aCqHJyB,cAlHb,SAAAA,EAAYpE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgE,IACjBnE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkE,GAAA7D,KAAAH,KAAMJ,KASRqE,QAAU,SAACpB,GACThD,EAAK6C,SAAS,CACZO,aAAcpD,EAAKD,MAAMsE,MAAMC,KAAM,SAAAC,GAAI,OAAIA,EAAKP,UAAYhB,EAAMa,OAAOW,QAAQpC,QAZpEpC,EAgBnB+C,WAAa,WACX/C,EAAK6C,SAAS,CACZO,aAAc,QAlBCpD,EAsBnBuB,gBAAkB,SAACb,EAAYF,GAC7BR,EAAKD,MAAMwB,gBAAgBb,EAAYF,IArBvCR,EAAKS,MAAQ,CACX2C,aAAc,KACdqB,KAAM,EACNC,gBAAiB,CAAEC,OAAQ,EAAGC,WAAY,EAAGC,SAAU,GACvDC,SAAU,CAAC,SAAU,UANN9E,wEA0BV,IAAA+E,EAAA5E,KACH6E,EAAY7E,KAAKM,MAAMiE,gBAAgBvE,KAAKJ,MAAMkF,WAAa9E,KAAKM,MAAMiE,gBAAgBvE,KAAKJ,MAAMkF,WAAa,EAClHC,EAAY,IAAIC,IAAEC,KAAK,CACzBC,QAAS,iCACTC,UAAW,6BACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,MAEfC,EAAa,IAAIR,IAAEC,KAAK,CAC1BC,QAAS,kCACTC,UAAW,6BACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,MAEfE,EAAW,IAAIT,IAAEC,KAAK,CACxBC,QAAS,gCACTC,UAAW,6BACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,MAEnB,OACC5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZH,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEzD,GAAG,MACH0D,QAAQ,IACRC,QAAQ,IACRC,OAAS7F,KAAKJ,MAAMkG,WAAWC,OAAS,EAAI/F,KAAKJ,MAAMkG,WAAa9F,KAAKM,MAAMqE,SAC/EL,KAAMtE,KAAKJ,MAAMkG,WAAWC,OAAS,EAAIlB,EAAY7E,KAAKM,MAAMgE,MAChE3C,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACEC,IAAI,qGACJC,YAAY,0DACZN,QAAQ,MAEVjE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACEC,IAAI,8EACJC,YAAY,yNACZC,WAAW,OACXR,QAAQ,IACRC,QAAQ,KACRQ,IAAI,QAGJpG,KAAKJ,MAAMsE,MAAMmC,IAAI,SAAAjC,GACnB,IAAIkC,EAAOlC,EAAKmC,SAAS3F,SAAS,KAAQwD,EAAKmC,SAASC,QAAQ,MAAO,IAAMpC,EAAKmC,SAASC,QAAQ,MAAO,IAAIA,QAAQ,IAAK,KACvHC,EAAOrC,EAAKsC,UAAU9F,SAAS,KAAQwD,EAAKsC,UAAUF,QAAQ,MAAO,IAAMpC,EAAKsC,UAAUF,QAAQ,MAAO,IAAIA,QAAQ,IAAK,KAC9H,OAAI5B,EAAKhF,MAAMY,aAAaI,SAASwD,EAAKP,SAEtClC,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAQhC,SAAU,CAAC2B,EAAKG,GAAMxB,KAAMF,EAAWhD,QAAS6C,EAAKX,QAAS2C,IAAKxC,EAAKP,QAAS5B,GAAImC,EAAKP,SAChGlC,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KAAUzC,EAAKjB,WAGVyB,EAAKhF,MAAMa,gBAAgBG,SAASwD,EAAKP,SAEhDlC,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAQhC,SAAU,CAAC2B,EAAKG,GAAMxB,KAAMO,EAAYzD,QAAS6C,EAAKX,QAAS2C,IAAKxC,EAAKP,QAAS5B,GAAImC,EAAKP,SACjGlC,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KAAUzC,EAAKjB,WAKjBxB,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAQhC,SAAU,CAAC2B,EAAKG,GAAMxB,KAAMQ,EAAU1D,QAAS6C,EAAKX,QAAS2C,IAAKxC,EAAKP,QAAS5B,GAAImC,EAAKP,SAC/FlC,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KAAUzC,EAAKjB,cAQzBnD,KAAKM,MAAM2C,cACXtB,EAAAC,EAAAC,cAACiF,EAAD,CACElE,WAAY5C,KAAK4C,WACjBK,aAAcjD,KAAKM,MAAM2C,aACzBzC,aAAcR,KAAKJ,MAAMY,aACzBC,gBAAiBT,KAAKJ,MAAMa,gBAC5BW,gBAAiBpB,KAAKoB,0BA3GZmB,aCWPwE,MAbf,SAAiBnH,GACf,OACE+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAKjC,EAAMoH,MACXrF,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,YAAOjC,EAAMqH,cAAcC,cACxCvF,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,YAAOjC,EAAMqH,cAAcE,WAAW7D,mBACtD3B,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,YAAOjC,EAAMqH,cAAc7D,kBACjDzB,EAAAC,EAAAC,cAAA,uCAA8BF,EAAAC,EAAAC,cAAA,YAAOjC,EAAMqH,cAAcG,cAAcrB,SACvEpE,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,YAAOjC,EAAMqH,cAAcI,gBCmCpCC,cA1Cd,SAAAA,EAAY1H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IAClBzH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwH,GAAAnH,KAAAH,KAAMJ,KAON2H,SAAW,SAAC1E,GACVhD,EAAK6C,SAAS,CACZoC,UAAWjC,EAAMa,OAAO8D,MACxBP,cAAepH,EAAKD,MAAM6H,SAAS5E,EAAMa,OAAO8D,SAElD3H,EAAK6H,cAAc7E,EAAMa,OAAO8D,MAAO3H,EAAKD,MAAM6H,SAAS5E,EAAMa,OAAO8D,SAbxD3H,EAgBlB6H,cAAgB,SAAC5C,EAAW6C,GAC1B9H,EAAKD,MAAM8H,cAAc5C,EAAW6C,IAftC9H,EAAKS,MAAQ,CACXwE,UAAWjF,EAAKD,MAAMkF,UACtBmC,cAAe,IAJCpH,wEAoBT,IAAA+E,EAAA5E,KACP,OACE2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAjB,uBACEH,EAAAC,EAAAC,cAAA,UAAQI,GAAG,cAAcuF,MAAOxH,KAAKJ,MAAMkF,UAAW8C,SAAU5H,KAAKuH,UACnE5F,EAAAC,EAAAC,cAAA,UAAQ2F,MAAM,WAAd,uBAEA1H,OAAO+H,KAAK7H,KAAKJ,MAAM6H,UAAUpB,IAAI,SAAAyB,GACnC,OAAOnG,EAAAC,EAAAC,cAAA,UAAQ2F,MAAO,CAACM,GAAUlB,IAAKhC,EAAKhF,MAAM6H,SAASK,GAASC,cAAe,CAACD,QAM9D,YAAzB9H,KAAKJ,MAAMkF,WACXnD,EAAAC,EAAAC,cAACmG,EAAD,CAAShB,KAAMhH,KAAKM,MAAMwE,UAAWmC,cAAejH,KAAKM,MAAM2G,wBApC5C1E,aC2Bd0F,sBAzBb,SAAAA,EAAYrI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiI,IACjBpI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmI,GAAA9H,KAAAH,KAAMJ,KAIRsI,YAAc,SAACrF,GACbA,EAAMC,iBACNjD,EAAKD,MAAMuI,gBALXtI,EAAKS,MAAQ,GAFIT,wEAWjB,OACI8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,sEAEFF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYC,QAAS/B,KAAKkI,aAA5C,uBApBgB3F,cCuKX6F,cApKb,SAAAA,IAAc,IAAAvI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoI,IACZvI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsI,GAAAjI,KAAAH,QAcFqI,aAAe,WACbxI,EAAK6C,SAAS,CACZ4F,mBAAoB,UACpBC,oBAAqB,GACrBC,mBAAoB3I,EAAKS,MAAM4D,SAnBrBrE,EAuBd4I,iBAAmB,SAAC5F,GAClBA,EAAMC,iBACN,IAAItC,EAAeX,EAAKS,MAAM4D,MAAMwE,OAAO,SAAAtE,GACzC,OAAOvE,EAAKS,MAAMqI,iBAAiB/H,SAASwD,EAAKP,WAGnDhE,EAAK6C,SAAS,CACZ4F,mBAAoB,UACpBC,oBAAqB,GACrBC,mBAAoBhI,KAhCVX,EAoCd+I,eAAiB,SAAC/F,GAChBA,EAAMC,iBACN,IAAIrC,EAAkBZ,EAAKS,MAAM4D,MAAMwE,OAAQ,SAAAtE,GAC7C,OAAOvE,EAAKS,MAAMuI,oBAAoBjI,SAASwD,EAAKP,WAGtDhE,EAAK6C,SAAS,CACZ4F,mBAAoB,UACpBC,oBAAqB,GACrBC,mBAAoB/H,KA7CVZ,EAiDduB,gBAAkB,SAACb,EAAYF,GACV,iBAAfE,EACFV,EAAK6C,SAAS,CACZiG,iBAAkBtI,IAGpBR,EAAK6C,SAAS,CACZmG,oBAAqBxI,KAxDbR,EA6DdiJ,qBAAuB,WACrB,GAAIpI,aAAaC,eAAe,cAAe,CAC7C,IAAIoI,EAAuBrI,aAAasI,QAAQ,cAC5CH,EAAsBvH,KAAK2H,MAAMF,GACrClJ,EAAK6C,SAAS,CACZmG,oBAAqBA,IAIzB,GAAInI,aAAaC,eAAe,gBAAiB,CAC/C,IAAIuI,EAAuBxI,aAAasI,QAAQ,gBAC5CL,EAAmBrH,KAAK2H,MAAMC,GAClCrJ,EAAK6C,SAAS,CACZiG,iBAAkBA,MA1EV9I,EA+EdsI,aAAe,WACbtI,EAAK6C,SAAS,CACZyG,WAAY,UAjFFtJ,EAqFd6H,cAAgB,SAAC5C,EAAW6C,GAC1B,GAAkB,YAAd7C,EAAyB,CAC3B,IAAIsE,EAAcvJ,EAAKS,MAAM4D,MAAMwE,OAAO,SAAAtE,GACxC,OAAOA,EAAK9D,MAAMM,SAASkE,KAG7BjF,EAAK6C,SAAS,CACZ4F,mBAAoBxD,EACpByD,oBAAqB,CAACZ,EAASpB,SAAUoB,EAASjB,WAClD8B,mBAAoBY,SAGtBvJ,EAAKwI,gBA/FPxI,EAAKS,MAAQ,CACX4D,MAAO,GACPuD,SAAU,GACVa,mBAAoB,UACpBC,oBAAqB,GACrBC,mBAAoB,GACpBG,iBAAkB,GAClBE,oBAAqB,GACrBM,WAAY,UACZE,iBAAgB,qBAAArG,OAAuBsG,KAAKC,MAAsB,EAAhBD,KAAKE,YAX7C3J,mFAqGM,IAAA+E,EAAA5E,KAClByJ,MAAM,sEACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GACJA,EAAQC,kBAAkBC,QAAQ,SAAA3F,GACV,YAAlBA,EAAKjB,WACPiB,EAAKP,QAAU,WAGnBe,EAAKlC,SAAS,CACZwB,MAAO2F,EAAQC,kBACftB,mBAAoBqB,EAAQC,sBAG/BE,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAE9BR,MAAM,+DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GACJjF,EAAKlC,SAAS,CACZ+E,SAAUoC,EAAQO,eAGrBJ,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,KAE9BjK,KAAK8I,wDAIL,OAAO9I,KAAKM,MAAM6I,YAChB,IAAK,OACH,OACExH,EAAAC,EAAAC,cAAA,OAAKC,UAAW9B,KAAKM,MAAM+I,kBACzB1H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,iBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,6DACAH,EAAAC,EAAAC,cAACwI,EAAD,CACEnG,MAAOlE,KAAKM,MAAMkI,mBAClB1D,UAAW9E,KAAKM,MAAMgI,mBACtBxC,WAAY9F,KAAKM,MAAMiI,oBACvB/H,aAAcR,KAAKM,MAAMqI,iBACzBlI,gBAAiBT,KAAKM,MAAMuI,oBAC5BzH,gBAAiBpB,KAAKoB,kBAExBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS/B,KAAKqI,aAAcpG,GAAG,mBAAvC,kBACAN,EAAAC,EAAAC,cAAA,UAAQE,QAAS/B,KAAKyI,iBAAkBxG,GAAG,uBAAsBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYiC,IAAI,iCAAiCD,IAAI,eAArI,SAA2J9D,KAAKM,MAAMqI,iBAAiB5C,OAAvL,kBACApE,EAAAC,EAAAC,cAAA,UAAQE,QAAS/B,KAAK4I,eAAgB3G,GAAG,sBAAqBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYiC,IAAI,kCAAkCD,IAAI,gBAAnI,SAA0J9D,KAAKM,MAAMuI,oBAAoB9C,OAAzL,uBAEFpE,EAAAC,EAAAC,cAACyI,EAAD,CAAgB7C,SAAUzH,KAAKM,MAAMmH,SAAU3C,UAAW9E,KAAKM,MAAMgI,mBAAoBZ,cAAe1H,KAAK0H,kBAIrH,QACE,OACE/F,EAAAC,EAAAC,cAAA,OAAKC,UAAW9B,KAAKM,MAAM+I,kBACzB1H,EAAAC,EAAAC,cAAC0I,EAAD,CAAapC,aAAcnI,KAAKmI,wBA9J1B5F,aCMEiI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.2d492505.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTooltip from 'react-tooltip';\n\nclass Buttons extends Component {\n  constructor(props) {\n   super(props);\n   this.state = {\n     parkUrl: this.props.parkUrl,\n     storageKey: this.props.storageKey,\n   };\n  }\n\n  saveNewParksArray = () => {\n    let newArray;\n    if (this.state.storageKey === 'visitedParks') {\n      newArray = this.props.visitedParks;\n    } else {\n      newArray = this.props.bucketListParks;\n    }\n\n    if ((localStorage.hasOwnProperty(this.state.storageKey)) && (newArray.includes(this.state.parkUrl))) {\n      let index = newArray.findIndex(parkCode => parkCode === this.state.parkUrl);\n      newArray.splice(index, 1);\n    } else {\n      newArray.push(this.state.parkUrl);\n    }\n    this.saveToLocalStorage(newArray);\n    this.updateParkCodes(this.state.storageKey, newArray);\n  }\n  \n  saveToLocalStorage = (newArray) => {\n    let newArrayToStore = JSON.stringify(newArray);\n    localStorage.setItem(this.state.storageKey, newArrayToStore);\n  }\n  \n  updateParkCodes = (storageKey, newArray) => {\n    this.props.updateParkCodes(storageKey, newArray);\n  }\n\n  render() {\n    let buttonType;\n    let toolTipText;\n    if (this.state.storageKey === 'visitedParks') {\n      buttonType = this.props.visitedParks;\n      toolTipText = buttonType.includes(this.state.parkUrl) ? 'Remove from Visited Parks' : 'Add to Visited Parks';\n    } else {\n      buttonType = this.props.bucketListParks;\n      toolTipText = buttonType.includes(this.state.parkUrl) ? 'Remove from Bucket List Parks' : 'Add to Bucket List Parks';\n    }\n\n    return (\n      <div className=\"icon-btns\">\n        <span \n          onClick={this.saveNewParksArray}\n          className={this.props.iconType} \n          id={\n            buttonType.includes(this.state.parkUrl) ? this.state.storageKey : ''\n          }\n          data-tip \n          data-for={\"tooltip/\" + this.state.storageKey}\n          >\n        </span>\n        <ReactTooltip id={\"tooltip/\" + this.state.storageKey} type='dark' effect='solid'>{toolTipText}</ReactTooltip>\n      </div>\n    )\n  }\n}\n\nexport default Buttons;","import React, { Component } from 'react';\nimport Buttons from './Buttons.js';\n\nclass Park extends Component {\n constructor(props) {\n    super(props);\n    this.state = {\n      displayFull: false  \n   };\n }\n  toggleFullCard= () => {\n    this.setState({\n      displayFull: !this.state.displayFull\n    });\n  }\n\n  removeCard = (event) => {\n    event.preventDefault();\n    this.props.removeCard();\n    this.setState({\n      displayFull: false,\n    });\n  }\n\n  updateParkCodes = (storageKey, newArray) => {\n    this.props.updateParkCodes(storageKey, newArray);\n  }\n\n  render() {\n    let imagePath = `./${this.props.selectedPark.image}`;\n    switch(this.state.displayFull) {\n      case(true):\n        return (\n          <div className=\"card-overlay\">\n            <div className=\"park-card-large\">\n              <div className=\"park-text-large\">\n              <i className=\"far fa-times-circle\" onClick={this.removeCard}></i>\n                <h1 className=\"park-title\">{this.props.selectedPark.parkName} National Park</h1>\n                <h3>State: {this.props.selectedPark.state}</h3>\n                <h3>Date Established: {this.props.selectedPark.dateEstablished}</h3>\n                <h3>Annual Visitors: {this.props.selectedPark.annualVisitors.toLocaleString()}</h3>\n                <h3>Park Highlight: {this.props.selectedPark.editorsChoice}</h3>\n                <a href={this.props.selectedPark.websiteUrl} target=\"_blank\">Link to {this.props.selectedPark.parkName}'s National Park Service Page</a>\n                <h3 className=\"park-descrip\">{this.props.selectedPark.description}</h3>\n                <button className=\"button-small\" onClick={this.toggleFullCard}>View Less</button>\n                <div className=\"user-list-btns\">\n                  <Buttons\n                    iconType=\"fas fa-hiking\"\n                    storageKey=\"visitedParks\"\n                    parkUrl={this.props.selectedPark.urlCode}\n                    visitedParks={this.props.visitedParks}\n                    bucketListParks={this.props.bucketListParks}\n                    updateParkCodes={this.updateParkCodes}\n                  />\n                  <Buttons\n                    iconType=\"fas fa-clipboard-list\"\n                    storageKey=\"bucketList\"\n                    parkUrl={this.props.selectedPark.urlCode}\n                    visitedParks={this.props.visitedParks}\n                    bucketListParks={this.props.bucketListParks}\n                    updateParkCodes={this.updateParkCodes}\n                  />\n                </div>\n              </div>\n              <img className=\"park-img-large\" alt=\"park\" src={imagePath} />\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"card-overlay\">\n            <div className=\"park-card-small\">\n              <i className=\"far fa-times-circle\" id=\"remove-card\" onClick={this.removeCard}></i>\n              <h1 className=\"park-title\">{this.props.selectedPark.parkName} National Park</h1>\n              <img className=\"park-img-small\" alt=\"park\" src={imagePath} />\n              <h3 className=\"park-text-small\">Park Highlight: {this.props.selectedPark.editorsChoice}</h3>\n              <button className=\"button-small\" onClick={this.toggleFullCard}>View More</button>\n              <div className=\"user-list-btns\">\n                <Buttons \n                  iconType=\"fas fa-hiking\"\n                  storageKey=\"visitedParks\"\n                  parkUrl={this.props.selectedPark.urlCode}\n                  visitedParks={this.props.visitedParks}\n                  bucketListParks={this.props.bucketListParks}\n                  updateParkCodes={this.updateParkCodes}\n                />\n                <Buttons \n                  iconType=\"fas fa-clipboard-list\" \n                  storageKey=\"bucketList\" \n                  parkUrl={this.props.selectedPark.urlCode} \n                  visitedParks={this.props.visitedParks}\n                  bucketListParks={this.props.bucketListParks}\n                  updateParkCodes={this.updateParkCodes}\n                />\n              </div>\n            </div>\n          </div>\n        );\n    }\n  }\n}\n\nexport default Park;","import React, { Component } from 'react';\nimport { Map, Marker, Tooltip, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport Park from './Park.js';\n\nclass ParkMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPark: null,\n      zoom: 4,\n      uniqueStateZoom: { Alaska: 4, California: 5, Michigan: 5 },\n      position: [37.0902, -95.7129],\n    };\n  }\n\n  getPark = (event) => {\n    this.setState({\n      selectedPark: this.props.parks.find( park => park.urlCode === event.target.options.id)\n    }) \n  }\n\n  removeCard = () => {\n    this.setState({\n      selectedPark: null\n    });\n  }\n\n  updateParkCodes = (storageKey, newArray) => {\n    this.props.updateParkCodes(storageKey, newArray);\n  }\n  \n  render() {\n    let stateZoom = this.state.uniqueStateZoom[this.props.stateName] ? this.state.uniqueStateZoom[this.props.stateName] : 6;\n    let greenIcon = new L.icon({\n      iconUrl: './assets/marker-icon-green.png',\n      shadowUrl: './assets/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n    let violetIcon = new L.icon({\n      iconUrl: './assets/marker-icon-violet.png',\n      shadowUrl: './assets/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n    let blueIcon = new L.icon({\n      iconUrl: './assets/marker-icon-blue.png',\n      shadowUrl: './assets/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n    return (\n     <div className=\"map-container\">\n        <Map \n          id=\"map\" \n          minZoom='3'\n          maxZoom='8'\n          center={ this.props.stateCoord.length > 0 ? this.props.stateCoord : this.state.position }\n          zoom={this.props.stateCoord.length > 0 ? stateZoom : this.state.zoom }>\n          <TileLayer \n            url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}'\n            attribution='Tiles &copy; Esri &mdash; Source: US National Park Service'\n            maxZoom='8'\n          />\n          <TileLayer \n            url='https://stamen-tiles-{s}.a.ssl.fastly.net/toner-hybrid/{z}/{x}/{y}{r}.{ext}'\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n            subdomains='abcd'\n            minZoom='0'\n            maxZoom='20'\n            ext='png'\n          />\n          {\n            this.props.parks.map(park => {\n              let lat = (park.latitude.includes('N')) ? park.latitude.replace(/.N$/, '') : park.latitude.replace(/.S$/, '').replace(/^/, '-');\n              let lon = (park.longitude.includes('E')) ? park.longitude.replace(/.E$/, '') : park.longitude.replace(/.W$/, '').replace(/^/, '-');\n              if (this.props.visitedParks.includes(park.urlCode)) {\n                return (\n                  <Marker position={[lat, lon]} icon={greenIcon} onClick={this.getPark} key={park.urlCode} id={park.urlCode}>\n                    <Tooltip>{park.parkName}</Tooltip>\n                  </Marker>\n                )\n              } else if (this.props.bucketListParks.includes(park.urlCode)) {\n                return (\n                  <Marker position={[lat, lon]} icon={violetIcon} onClick={this.getPark} key={park.urlCode} id={park.urlCode}>\n                    <Tooltip>{park.parkName}</Tooltip>\n                  </Marker>\n                )\n              } else {\n                return (\n                  <Marker position={[lat, lon]} icon={blueIcon} onClick={this.getPark} key={park.urlCode} id={park.urlCode}>\n                    <Tooltip>{park.parkName}</Tooltip>\n                  </Marker>\n                )\n              }\n            })\n          }\n        </Map>\n        {\n          this.state.selectedPark && \n          <Park \n            removeCard={this.removeCard} \n            selectedPark={this.state.selectedPark}\n            visitedParks={this.props.visitedParks}\n            bucketListParks={this.props.bucketListParks}\n            updateParkCodes={this.updateParkCodes}\n          />\n        }\n      </div>   \n    )\n  }\n}\n\nexport default ParkMap;\n","import React from 'react';\n\n\nfunction UsState(props) {\n  return (\n    <div className=\"state-card\">\n      <h1>{props.name}</h1>\n      <h3>Capital: <span>{props.selectedState.capitalCity}</span></h3>\n      <h3>Population: <span>{props.selectedState.Population.toLocaleString()}</span></h3>\n      <h3>Date Established: <span>{props.selectedState.dateEstablished}</span></h3>\n      <h3>Number of Parks in State: <span>{props.selectedState.nationalParks.length}</span></h3>\n      <h3>State Flower: <span>{props.selectedState.stateFlower}</span></h3>\n    </div>\n  )\n}\n\nexport default UsState;","import React, { Component } from 'react';\nimport UsState from './UsState.js';\n\nclass FilterControls extends Component {\n constructor(props) {\n  super(props);\n  this.state = {\n    stateName: this.props.stateName,\n    selectedState: {}\n  };\n }\n  \n  getState = (event) => {\n    this.setState({\n      stateName: event.target.value,\n      selectedState: this.props.usStates[event.target.value]\n    });\n    this.setMapToState(event.target.value, this.props.usStates[event.target.value]);\n  }\n\n  setMapToState = (stateName, stateObj) => {\n    this.props.setMapToState(stateName, stateObj);\n  }\n\n  render() {\n    return (\n      <div className=\"filter-controls\">\n        <label className=\"filter-label\">View Parks By State:\n          <select id=\"select-menu\" value={this.props.stateName} onChange={this.getState}>\n            <option value=\"default\">Please pick a state</option>\n          {\n            Object.keys(this.props.usStates).map(usState => {\n              return(<option value={[usState]} key={this.props.usStates[usState].abbreviation}>{[usState]}</option>)\n            })\n          }\n          </select>\n        </label>\n        {\n          this.props.stateName !== 'default' && \n          <UsState name={this.state.stateName} selectedState={this.state.selectedState}/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default FilterControls;","import React, { Component } from 'react';\nimport './styles/main.scss';\n\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    this.props.openHomePage();\n  }\n\n  render() {\n    return(\n        <div className=\"splash-div\">\n          <h1 className=\"splash-title\">Mark My Parks</h1>\n          <div className=\"info-card\">\n            <p>Dreaming about your next adventure?</p>\n            <p>Looking for National Park information for the perfect trip?</p>\n            <p>Find details and resources on all 58 U.S. National Parks</p>\n          </div>\n          <button className=\"enter-btn\" onClick={this.handleClick}>Explore Now</button>\n        </div>\n    );\n  }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport './App.css';\nimport ParkMap from './ParkMap.js';\nimport FilterControls from './FilterControls.js';\nimport LandingPage from './LandingPage.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      parks: [],\n      usStates: {},\n      currentUsStateName: 'default',\n      currentUsStateCoord: [],\n      currentParksToShow: [],\n      visitedParkCodes: [],\n      bucketListParkCodes: [],\n      pageStatus: 'landing',\n      randomImageClass: `landing-background${Math.floor(Math.random() * 6)}`\n    };\n  }\n\n  showAllParks = () => {\n    this.setState({\n      currentUsStateName: 'default',\n      currentUsStateCoord: [],\n      currentParksToShow: this.state.parks\n    })\n  }\n\n  showVisitedParks = (event) => {\n    event.preventDefault();\n    let visitedParks = this.state.parks.filter(park => {\n      return this.state.visitedParkCodes.includes(park.urlCode)\n    });\n\n    this.setState({\n      currentUsStateName: 'default',\n      currentUsStateCoord: [],\n      currentParksToShow: visitedParks\n    });\n  }\n\n  showBucketList = (event) => {\n    event.preventDefault();\n    let bucketListParks = this.state.parks.filter( park => {\n      return this.state.bucketListParkCodes.includes(park.urlCode)\n    });\n\n    this.setState({\n      currentUsStateName: 'default',\n      currentUsStateCoord: [],\n      currentParksToShow: bucketListParks\n    });\n  }\n\n  updateParkCodes = (storageKey, newArray) => {\n    if (storageKey === 'visitedParks') {\n      this.setState({\n        visitedParkCodes: newArray\n      });\n    } else {\n      this.setState({\n        bucketListParkCodes: newArray\n      });\n    }\n  }\n\n  pullFromLocalStorage = () => {\n    if (localStorage.hasOwnProperty('bucketList')) {\n      let cachedBucketListKeys = localStorage.getItem('bucketList');\n      let bucketListParkCodes = JSON.parse(cachedBucketListKeys);\n      this.setState({\n        bucketListParkCodes: bucketListParkCodes\n      });\n    }\n\n    if (localStorage.hasOwnProperty('visitedParks')) {\n      let cachedVistedParkKeys = localStorage.getItem('visitedParks');\n      let visitedParkCodes = JSON.parse(cachedVistedParkKeys);\n      this.setState({\n        visitedParkCodes: visitedParkCodes\n      });\n    }\n  }\n\n  openHomePage = () => {\n    this.setState({\n      pageStatus: 'home'\n    });\n  }\n\n  setMapToState = (stateName, stateObj) => {\n    if (stateName !== 'default') {\n      let parksToShow = this.state.parks.filter(park => {\n        return park.state.includes(stateName)\n      });\n    \n      this.setState({\n        currentUsStateName: stateName,\n        currentUsStateCoord: [stateObj.latitude, stateObj.longitude],\n        currentParksToShow: parksToShow\n      });\n    } else {\n      this.showAllParks();\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://whateverly-datasets.herokuapp.com/api/v1/nationalParks1810\")\n      .then(data => data.json())\n      .then(results => {\n        results.nationalParks1810.forEach(park => {\n          if (park.parkName === 'Sequoia') {\n            park.urlCode = 'seki2';\n          }\n        });\n        this.setState({\n          parks: results.nationalParks1810,\n          currentParksToShow: results.nationalParks1810\n        });\n      })\n      .catch(error => console.log(error));\n\n    fetch(\"https://whateverly-datasets.herokuapp.com/api/v1/states1810\")\n      .then(data => data.json())\n      .then(results => {\n        this.setState({\n          usStates: results.states1810\n        });\n      })\n      .catch(error => console.log(error));\n\n    this.pullFromLocalStorage();\n  }\n\n  render() {\n    switch(this.state.pageStatus) {\n      case('home'):\n        return (\n          <div className={this.state.randomImageClass}>\n            <div className=\"overlay\">\n              <h1 className=\"home-title\">Mark My Parks</h1>\n              <p className=\"user-instructions\">Click a map marker to learn more about that National Park</p>\n              <ParkMap \n                parks={this.state.currentParksToShow} \n                stateName={this.state.currentUsStateName} \n                stateCoord={this.state.currentUsStateCoord}\n                visitedParks={this.state.visitedParkCodes}\n                bucketListParks={this.state.bucketListParkCodes}\n                updateParkCodes={this.updateParkCodes}\n              />\n              <div className=\"filters\">\n                <button onClick={this.showAllParks} id=\"show-all-button\">Show All Parks</button>\n                <button onClick={this.showVisitedParks} id=\"show-visited-button\"><img className=\"loc-icons\" src=\"./assets/marker-icon-green.png\" alt=\"green icon\" /> Show {this.state.visitedParkCodes.length} Visited Parks</button>\n                <button onClick={this.showBucketList} id=\"show-bucket-button\"><img className=\"loc-icons\" src=\"./assets/marker-icon-violet.png\" alt=\"purple icon\" /> Show {this.state.bucketListParkCodes.length} Bucket List Parks</button>\n              </div>\n              <FilterControls usStates={this.state.usStates} stateName={this.state.currentUsStateName} setMapToState={this.setMapToState} />\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className={this.state.randomImageClass}>\n            <LandingPage openHomePage={this.openHomePage} />\n          </div>\n        );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}